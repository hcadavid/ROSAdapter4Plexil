//Env variables
//---------------
//Yaw
//XPosition
//YPosition
//LinearVelocity
//AngularVelocity
//Ready
//SafetyWarning

//Commands


Command RequestLinearVelocity(Real);
Command RequestAngularVelocity(Real); 
Command pprint(...);

Rotate:{

	Boolean completeTurn=false;
	Real PI=3.1416;

	Real initialYaw=0;

	Real WIDTH=5;

	Boolean goal=false;



	Start Lookup(Ready)==1;

	initialYaw=Lookup(Yaw);

	pprint("Original coords:",Lookup(XPosition),Lookup(YPosition));



	for (Integer i = 1; i <= 4; i + 1) 
	{

		Move:{
			Real currXPos,currYPos;

			Sequence{
				UpdateOdom:{
					currXPos=Lookup(XPosition);
					currYPos=Lookup(YPosition);
				}
				MoveUntilDistanceReached:{
					Start sqrt((currXPos-Lookup(XPosition))*(currXPos-Lookup(XPosition))+
				  			(currYPos-Lookup(YPosition))*(currYPos-Lookup(YPosition))) < WIDTH;
					Repeat sqrt((currXPos-Lookup(XPosition))*(currXPos-Lookup(XPosition))+
				  			(currYPos-Lookup(YPosition))*(currYPos-Lookup(YPosition))) < WIDTH;
			
					RequestLinearVelocity(1);
				}

			}

			
		}

		Stop:{
			RequestAngularVelocity(0); 
		}


			
		Turn:{

			initialYaw=Lookup(Yaw);
			completeTurn=false;

			Concurrence{


				StaticTurn:{		

					//Start false;

					Repeat completeTurn==false;

					RequestAngularVelocity(0.1);     

					
					pprint("Angle ",Lookup(Yaw),Lookup(Yaw));
					pprint("Diff ",abs(initialYaw-Lookup(Yaw)));

				}

				CompleteTurnCheck:{


					Start  (abs(initialYaw-Lookup(Yaw)) <= PI && abs(initialYaw-Lookup(Yaw))>=PI/2) || 
						   (abs(initialYaw-Lookup(Yaw)) > PI && (2*PI-abs(initialYaw-Lookup(Yaw)))>=PI/2);
					pprint("Second turn complete!"); 
					completeTurn=true;
				}

			}


		}


	}


	



}

       